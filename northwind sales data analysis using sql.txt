
select category_name , description from categories
order by category_name;

-- Show all the contact_name, address, city of all customers which are not from 'Germany', 'Mexico', 'Spain'

select contact_name , address , city from customers
where country not in ("Germany","Mexico","Spain");

-- Show order_date, shipped_date, customer_id, Freight of all orders placed on 2018 Feb 26


select order_date , shipped_date , customer_id ,freight from orders
where order_date = "2018-02-26";

-- Show the employee_id, order_id, customer_id, required_date, shipped_date from all orders shipped later than the required date


select employee_id , order_id , customer_id , required_date , shipped_date from orders
where required_date < shipped_date;


--Show all the even numbered Order_id from the orders table

select order_id from orders
where order_id % 2 = 0;

-- Show the city, company_name, contact_name of all customers from cities which contains the letter 'L' in the city name, sorted by contact_name


select city , company_name , contact_name from customers
where city like "%L%"
order by contact_name;

-- Show the company_name, contact_name, fax number of all customers that has a fax number. (not null)

select company_name , contact_name , fax from customers
where fax is not null;

-- Show the first_name, last_name. hire_date of the most recently hired employee.

select first_name , last_name , max(hire_date) from employees;


-- Show the average unit price rounded to 2 decimal places, the total units in stock, total discontinued products from the products table.

select round(avg(unit_price),2) as average_price, sum(units_in_stock) as total_stock , sum(discontinued) as total_discontinued from products; 

-- Show the ProductName, CompanyName, CategoryName from the products, suppliers, and categories table

select product_name , company_name , category_name from products 
join suppliers on suppliers.supplier_id = products.supplier_id
join categories on categories.category_id = products.category_id;

-- Show the category_name and the average product unit price for each category rounded to 2 decimal places.

select category_name , round(avg(unit_price),2) as average_unit_price from categories
join products on products.category_id = categories.category_id
group by category_name;

-- Show the city, company_name, contact_name from the customers and suppliers table merged together.
--Create a column which contains 'customers' or 'suppliers' depending on the table it came from.

select City, company_name, contact_name, 'customers' as relationship 
from customers
union
select city, company_name, contact_name, 'suppliers'
from suppliers

-- Show the employee's first_name and last_name, a "num_orders" column with a count of the orders taken, and a column called "Shipped" that displays "On Time" if the order shipped_date is less or equal to the required_date, "Late" if the order shipped late.
-- Order by employee last_name, then by first_name, and then descending by number of orders.

select first_name , last_name , count(order_id) as num_orders , 
case
	 when shipped_date <= required_date then "On Time"
     else "Late"
	 --when shipped_date = shipped_date  then "Late"
    end as shipped 
from employees
join orders on orders.employee_id = employees.employee_id
group by first_name, last_name , shipped
order by last_name ,first_name , num_orders desc;

-- Show how much money the company lost due to giving discounts each year, order the years from most recent to least recent. Round to 2 decimal places

select year(order_date) as order_year , round(sum((unit_price * quantity) * discount),2) as discount_amount from orders
join order_details on order_details.order_id = orders.order_id
join products on products.product_id = order_details.product_id
group by order_year
order by order_year desc;
